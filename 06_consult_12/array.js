const brothers = [
  { race: "hobbit", height: 110, age: 45, name: "Frodo Baggins" },
  { race: "human", height: 185, age: 46, name: "Aragorn" },
  { race: "elf", height: 189, age: 110, name: "Legolas" },
  { race: "dworf", height: 140, age: 150, name: "Gimly" },
  { race: "human", height: 195, age: 200, name: "Gandalf" },
];

// Метод Map - возвращает новый массив,
// созданный путем применения функции к каждому элементу исходного массива
//Этот метод не изменяет исходный массив

// Пример 1

const names = brothers.map((element) => element.name);
console.log(names); // [ 'Frodo Baggins', 'Aragorn', 'Legolas', 'Gimly', 'Gandalf' ]

const ages = brothers.map((brother) => brother.age);
console.log(ages); // [ 45, 46, 110, 150, 200 ]

// Пример 3
const racesNames = brothers.map((brother) => brother.race + " " + brother.name);
console.log(racesNames); // [ 'hobbit Frodo Baggins', 'human Aragorn', 'elf Legolas', 'dworf Gimly', 'human Gandalf' ]

// Пример 4
// высокий - выше или равно 170
// маленький - ниже 170
// массив из слов [маленький, высокий,высокий, маленький,высокий]
const size = brothers.map((brother) => {
  if (brother.height >= 170) {
    return "высокий";
  } else {
    return "маленький";
  }
});
console.log(size); // [ 'маленький', 'высокий', 'высокий', 'маленький', 'высокий' ]

// Метод forEach - выполняет указанную функцию один раз для каждого элемента массива
// Этот метод не изменяет исходный массив

// Пример 5
//Состарим всех героев на 1 год
brothers.forEach((brother) => (brother.age += 1)); // увеличиваем возраст на 1 год
console.log(brothers);

// Пример 7
// Переведем все имена в верхний регистр
// Метод toUpperCase() возвращает строку, в которой все символы преобразованы в верхний регистр.
// Метод toUpperCase() не изменяет строку, к которой он применяется

brothers.forEach((brother) => (brother.name = brother.name.toUpperCase())); // переводим в верхний регистр
console.log(brothers);

// Пример 8
// 3 Метод reduce
// с помощью цикла  for
// 1. Создаем переменную sum и присваиваем ей значение 0
// 2. Проходим по каждому элементу массива ages с помощью цикла for
// 3. На каждой итерации добавляем значение поля age текущего элемента к переменной sum
// 4. После завершения цикла возвращаем значение переменной sum
// 5. Выводим результат в консоль
// 6. Метод reduce() не изменяет исходный массив
// 7. Метод reduce() возвращает одно значение, которое является результатом применения функции к каждому элементу массива
// 8. Метод reduce() принимает два аргумента: функцию и начальное значение аккумулятора
// 9. Функция принимает два аргумента: аккумулятор и текущий элемент массива
// 10. Начальное значение аккумулятора передается в качестве второго аргумента метода reduce()
// 11. Если начальное значение не передано, то первым элементом массива будет использован первый элемент массива, а вторым - второй элемент массива
// 12. Если массив пустой и начальное значение не передано, то будет выброшено исключение TypeError

let sum = 0; // создаем переменную sum и присваиваем ей значение 0
for (let i = 0; i < ages.length; i++) {
  // проходим по каждому элементу массива ages с помощью цикла for
  sum += ages[i]; // на каждой итерации добавляем значение поля age текущего элемента к переменной sum
}
console.log(sum); // выводим результат в консоль

// Пример 9
// с помощью reduce
const sum2 = ages.reduce((acc, current) => acc + current, 0); // создаем переменную sum2 и присваиваем ей значение 0
console.log(sum2); // выводим результат в консоль

// iteration -- acc -- current
// 1         -- 0   -- 45
// 2         -- 45  -- 46
// 3         -- 91  -- 110
// 4         -- 201 -- 150
// 5         -- 351 -- 200

// Аккумулятор (accumulator) - значение,
// которое накапливает результат применения функции.
// Текущий элемент массива (currentValue).
// Текущий индекс (currentIndex) элемента в массиве.
// Сам массив (array), к которому применяется метод reduce.
// Функция callback должна возвращать новое значение аккумулятора
// после обработки текущего элемента.

// initialValue (необязательный): Начальное значение аккумулятора.
// Если это значение указано,
//  то оно будет использовано в качестве начального значения аккумулятора
// при первом вызове функции callback.
// Если initialValue не указан, то первый элемент массива станет
// начальным значением аккумулятора.

// Комбинация map+reduce
// общая высота наших героев
const totalHeight = brothers.reduce((acc, brother) => acc + brother.height, 0);
console.log(totalHeight); //  110 + 185 + 189 + 140 + 195 = 819

// можно сделать цепочку
const totalHeight2 = brothers
  .map((brother) => brother.height) //получили массив ростов
  .reduce((acc, height) => acc + height, 0); // получили общую высоту
// 1. Сначала мы используем метод map, чтобы создать новый массив, содержащий только высоты братьев.
// 2. Затем мы применяем метод reduce к этому новому массиву, чтобы получить общую высоту всех братьев.
// 3. Метод reduce принимает два аргумента: аккумулятор (acc) и текущий элемент (height).
// 4. На каждой итерации мы добавляем текущую высоту к аккумулятору (acc) и возвращаем его.
// 5. Начальное значение аккумулятора устанавливается в 0, чтобы начать с нуля.
console.log(totalHeight2); //  110 + 185 + 189 + 140 + 195 = 819

// Пример 12
  // Метод split  разделяет строку на массив строк по указанному разделителю
// Метод split() возвращает новый массив

const str = "Gandalf, Sauron, Saruman, Legolas, Elrond "// строка с именами
// Метод split() разделяет строку на массив строк по запятой и пробелу
const namesArr = str.split(", "); // разделяем строку на массив строк
// Метод split() возвращает новый массив строк, полученных в результате разделения исходной строки
console.log(namesArr); // ['Gandalf', 'Sauron', 'Saruman', 'Legolas', 'Elrond']

// Пример 13
// Метод join() объединяет все элементы массива в строку с указанным разделителем
// Метод join() возвращает строку, полученную в результате объединения всех элементов массива

const newString = namesArr.join("!"); // объединяем массив строк в одну строку с разделителем "!" между элементами
console.log(newString); // Gandalf!Sauron!Saruman!Legolas!Elrond

// Пример 14
// Метод find-  возвращает первое совпадение с заданным условием

const person = brothers.find((brother) => brother.race === "human"); // ищем первого человека в массиве brothers
console.log(person); // { race: 'human', height: 185, age: 47, name: 'ARAGORN' }

const person2 = brothers.find((brother)=>brother.name === "ARAGORN");
console.log(person2);

// Пример 16
// Метод filter
// Возвращает все элементы удовлетворяющие условию
// не мутирующий массив (не изменяет исходный массив)
//Выбрать тех кто старше 100 лет

const oldBrothers = brothers.filter((brother) => brother.age > 100 && brother.race !=="human"); // фильтруем массив brothers по условию
// Метод filter() возвращает новый массив, содержащий все элементы исходного массива, которые удовлетворяют условию
console.log(oldBrothers); 
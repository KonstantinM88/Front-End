'use strict'

// number, string, bigint, boolean, symbol, null, undefined
// Object, function, array, date, regex

const x = 10;

let y, z;
y = 12;

let b = 13;

console.log(b);

// let - переменная, которая может изменять свое значение в процессе выполнения программы
// const - константа, которая не может изменять свое значение в процессе выполнения программы
// var - устаревшая переменная, которая может изменять свое значение в процессе выполнения программы

// Operators

// operator, operand - оператор, операнд



// Операторы - это специальные символы, которые выполняют операции над переменными и значениями
// Операторы делятся на:
// 1. Арифметические операторы - выполняют математические операции над числами
// 2. Операторы сравнения - сравнивают два значения и возвращают логическое значение true или false
// 3. Логические операторы - выполняют логические операции над логическими значениями
// 4. Операторы присваивания - присваивают значение переменной
// 5. Операторы битового сдвига - выполняют операции над двоичными числами
// 6. Операторы побитового И, ИЛИ, XOR - выполняют операции над двоичными числами
// 7. Операторы инкремента и декремента - увеличивают или уменьшают значение переменной на 1
// 8. Операторы typeof и instanceof - возвращают тип переменной или объекта
// 9. Оператор delete - удаляет свойство объекта
// 10. Оператор in - проверяет наличие свойства в объекте
// 11. Оператор new - создает новый объект
// 12. Оператор this - ссылается на текущий объект
// 13. Оператор void - выполняет выражение и возвращает undefined
// 14. Оператор yield - используется в генераторах для приостановки выполнения функции
// 15. Оператор await - используется в асинхронных функциях для ожидания выполнения промиса
// 16. Оператор spread - используется для распаковки массива или объекта
// 17. Оператор rest - используется для сбора оставшихся аргументов функции в массив
// 18. Оператор nullish coalescing - возвращает первое значение, которое не является null или undefined
// 19. Оператор optional chaining - позволяет безопасно обращаться к вложенным свойствам объекта
// 20. Оператор destructuring - позволяет распаковывать массивы и объекты в переменные
// Math operators
// Arithmetic operators: +, -, *, /, %, **
// reminder - остаток от деления
// exponentiation - возведение в степень
// increment - инкремент (увеличение на 1)
// decrement - декремент (уменьшение на 1)
// assignment - присваивание
// comparison - сравнение
// equality - равенство
// logical - логические операторы

let sum = 1 + 2; // 3
console.log(sum); // 3
let exmpl2 = "1" + 2; // 12
console.log(exmpl2); // 12

let exmpl3 = true + 4; // правда = 1, ложь = 0
console.log(exmpl3); // 5

let exmpl4 = "a" / 9; // NaN - Not a Number - не число
// NaN - это специальное значение, которое обозначает, что результат операции не является числом
console.log(exmpl4); // NaN

let exmpl5 = "9" - 5; // - вызвал имплицитное преобразование типов
// - строка преобразуется в число
console.log(exmpl5); // 4

let exmpl6 =  7 % 3; // 1 - остаток от деления
console.log(exmpl6); // 1

// const myAge = 31;
// myAgeIsEven = myAge % 2 === 0; // тернарный оператор
// console.log(myAgeIsEven); // even

const exmpl7 = 2 ** 3; // 8 - возведение в степень
console.log(exmpl7); // 8

// Logic operators
// && - логическое И (AND) - возвращает true, если оба операнда истинны
// || - логическое ИЛИ (OR) - возвращает true, если хотя бы один операнд истинен
// ! - логическое НЕ (NOT) - возвращает true, если операнд ложен
// ?? - логическое ИЛИ с нулем (nullish coalescing) - возвращает первое значение, которое не является null или undefined

let exmpl8 = true && false; // false - оба операнда не истинны
let exmpl9 = true && true; // true - оба операнда истинны
let exmpl10 = !!true; // false - логическое НЕ (NOT) - возвращает true, если операнд ложен

// более сложные примеры использование логических операторов
// let exmpl11 = (true && false) || (true && true); // true - хотя бы один операнд истинен
// let exmpl12 = (true && false) || (false && true); // false - оба операнда не истинны
let exmpl11 = !!5; // true - 5 - это число, которое не является нулем
let exmpl12 = !!0; // false - 0 - это число, которое является нулем
console.log(exmpl11); // true
console.log(exmpl12); // false
let exmpl13 = Boolean(5); // true - 5 - это число, которое не является нулем
console.log(exmpl13); // true

const myName = "Alisher";
const defaultName = "John";

const result = myName || defaultName; // Alisher - если myName не пустая строка, то возвращаем myName, иначе возвращаем defaultName
console.log(result); // Alisher

const userAge = undefined; // undefined - значение не определено

const age = userAge || 18; // 18 - если userAge не определено, то возвращаем 18, иначе возвращаем userAge
console.log(age); // 18

// falsy values - ложные значения
// 0, "", null, undefined, NaN - все эти значения приводят к false при приведении к логическому типу

// Операторы сравнения
// == - равенство (сравнивает значения, игнорируя типы)
// >, <, >=, <= - сравнение (сравнивает значения и типы)
console.log(6 > NaN); // false - NaN не является числом
console.log(NaN > NaN); // false - NaN не является числом

// === - строгое равенство (сравнивает значения и типы)
console.log("5" == 5); // true - строка "5" приводится к числу 5
console.log("5" === 5); // false - строка "5" не равна числу 5

console.log("Hello" === true); // false - строка "Hello" не равна true
console.log("Hello" == true); // false - строка "Hello" не равна true
console.log("true" == true); // false - строка "true" не равна true
console.log(String(true)); // "true" - строка "true" равна строке "true"
console.log(Number("Hello")); // NaN - строка "Hello" не является числом
console.log(Number(true)); // 1 - true приводится к числу 1

console.log("9" == 9); // true - строка "9" приводится к числу 9
console.log(Number("9")); // 9 - строка "9" приводится к числу 9
console.log(('9'+3) == 12 ); // false - строка "93" не равна числу 12
// исключение из правила
// console.log(0 == false); // true - 0 приводится к false
console.log(undefined == null); // true - undefined приводится к null
console.log(Number(undefined)); // NaN - undefined не является числом
console.log(Number(null)); // 0 - null приводится к числу 0


// !== - строгое неравенство (сравнивает значения и типы)
// != - неравенство (сравнивает значения, игнорируя типы) крайне редко используется
